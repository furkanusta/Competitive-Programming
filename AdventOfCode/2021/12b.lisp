(require 'util)
(in-package :my-aoc)

(defun traverse (roads visited current end double-visit)
  (if (equal current end)
      1
      (let ((road-count 0))
        (dolist (neigh (gethash current roads) road-count)
          (when (nand double-visit (gethash neigh visited))
            (let ((double-visit (or double-visit (when (gethash neigh visited) neigh))))
              (when (str:downcasep neigh)
                (setf (gethash neigh visited) t))
              (incf road-count (traverse roads visited neigh end double-visit))
              (unless (equal double-visit neigh)
                (remhash neigh visited))))))))

(let* ((raw-data (read-file "12.inp"))
       (connections (mapcar (curry #'str:split "-") raw-data))
       (roads (make-hash-table :test #'equal)))
  (mapc
   (lambda (connection)
     (let ((start (car connection))
           (end (cadr connection)))
       (unless (or (equal end "start") (equal start "end"))
         (push end (gethash start roads)))
       (unless (or (equal start "start") (equal end "end")
                   (push start (gethash end roads))))))
   connections)
  (traverse roads (make-hash-table :test #'equal) "start" "end" nil))
