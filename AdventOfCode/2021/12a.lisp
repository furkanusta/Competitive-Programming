(require 'util)
(in-package :my-aoc)

(defun print-hash-table (hash-table)
  (let ((test (hash-table-test hash-table)))
    (format t "#(~%")
    (maphash (lambda (k v) (format t "   (~S . ~S)~%" k v)) hash-table)
    (format t "   ) :TEST '~A)~%" test)
    hash-table))

(defun traverse (roads visited current end)
  ;; (format t "~a ~%" current)
  ;; (print-hash-table visited)
  (if (equal current end)
      1
      (let ((road-count 0))
        (dolist (neigh (gethash current roads) road-count)
          (unless (gethash neigh visited)
            (when (str:downcasep neigh)
              (setf (gethash neigh visited) t))
            (incf road-count (traverse roads visited neigh end))
            ;; (format t "RETURN: ~a~%" road-count)
            (remhash neigh visited))))))

(let* ((raw-data (read-file "12.inp"))
       (connections (mapcar (curry #'str:split "-") raw-data))
       (roads (make-hash-table :test #'equal)))
  (mapc
   (lambda (connection)
     (let ((start (car connection))
           (end (cadr connection)))
       (unless (or (equal end "start") (equal start "end"))
         (push end (gethash start roads)))
       (unless (or (equal start "start") (equal end "end")
                   (push start (gethash end roads))))))
   connections)
  (traverse roads (make-hash-table :test #'equal) "start" "end"))
